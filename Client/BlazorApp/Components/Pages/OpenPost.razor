@page "/posts/{PostId}"
@attribute [Authorize]
@using System.Security.Claims
@using System.Text.Json
@using ApiContracts
@using ApiContracts.LikeRelated
@using BlazorApp.Services
@inject IPostService PostService;
@inject ICommentService CommentService;

<h3>@post?.Title</h3>

@if (post != null)
{
    <div>
        <p>
            <strong>Author: </strong>@post.AuthorUsername
        </p>
        <p>
            <strong>Likes: </strong>@post.LikesNo
        </p>
        <p>@post.Body</p>

        <button @onclick="LikePost" class="bth btn-secondary">Like</button>

        @if (errorMessage != null)
        {
            <div class="alert alert-danger">@errorMessage</div>
        }

        <h4>Comments</h4>

        @foreach (var comment in post.Comments)
        {
            <div class="card">
                <div class="card-body">
                    <p>
                        <strong>@comment.AuthorUsername</strong>: @comment.Body
                        @if (userId == comment.AuthorId)
                        {
                            <button class="m-4" @onclick="()=>DeleteComment(comment.CommentId)">Delete</button>
                        }
                    </p>
                </div>
            </div>
        }

        <h4>Add comment</h4>
        <div>
            <textarea @bind="newComment.Body" class="form-control" rows="3"></textarea>
            <button class="btn btn-secondary mt-2 mb-4" @onclick="AddComment">Submit comment</button>
        </div>

    </div>
}
else
{
    <p>Post not found.</p>
}


@code{
    [Parameter] public string PostId { get; set; }
    [CascadingParameter] public Task<AuthenticationState>? State { get; set; }
    private int userId;

    private GetPostResponseDto post;
    private CreateCommentRequestDto newComment = new();

    private string? errorMessage;


    protected override async Task OnInitializedAsync()
    {
        if (int.TryParse(PostId, out int postId))
            post = await PostService.GetPostAsync(postId);
        else Console.WriteLine("Invalid postId"); 
        
        await HandleAuthentication();
    }

    private async Task HandleAuthentication()
    {
        if (State is not null)
        {
            AuthenticationState authenticationState = await State;
            ClaimsPrincipal claimsPrincipal = authenticationState.User;
            if (claimsPrincipal.Identity is null || !claimsPrincipal.Identity.IsAuthenticated)
            {
                return;
            }

            IEnumerable<Claim> claims = claimsPrincipal.Claims;
            string userIdAsString = claims.Single(c => c.Type.Equals("Id")).Value;
            
            userId = int.Parse(userIdAsString);
        }
    }

    private async Task AddComment()
    {
        try
        {
            errorMessage = null;
            if (!string.IsNullOrWhiteSpace(newComment.Body))
            {
                newComment.UserId = userId;
                await PostService.AddCommentAsync(newComment, int.Parse(PostId));
                newComment = new CreateCommentRequestDto();
                post = await PostService.GetPostAsync(int.Parse(PostId));
                errorMessage = null;
            }
        }
        catch (Exception e)
        {
            errorMessage = e.Message;
        }
    }

    private async Task LikePost()
    {
        try
        {
            errorMessage = null;
            await PostService.AddLikeAsync(new AddLikeRequestDto { UserId = userId }, int.Parse(PostId));
            post = await PostService.GetPostAsync(int.Parse(PostId));
            errorMessage = null;
        }
        catch (Exception e)
        {
            errorMessage = e.Message;
        }
    }

    private async Task DeleteComment(int commentId)
    {
        try
        {
            errorMessage = null;
            await CommentService.DeleteCommentAsync(new DeleteRequestDto{ItemToDeleteId = commentId, UserId = userId}, commentId);
            post = await PostService.GetPostAsync(int.Parse(PostId));
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }
    }

}